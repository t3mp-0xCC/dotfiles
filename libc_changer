#!/bin/bash
#
# for ctf
# 配られたlibcが手元に無くても無理やりバイナリを動かすことが出来るようにパッチを行う
#
# forked from https://gist.github.com/tachibana51/a89a748eaebc8b080eb0b46c35233e0d/raw/381232841e9d625ad759030d1ebe8fdf05775707/libc%2520changer

## TODO ##
# local libc version support
# miner libc version support

#### function ####
function usage {
cat >&2 <<EOS
usage: $0 [ubuntu-version] [glibc-version] elf-file [options]
[options]
-h | --help:
  show help
-m32 | --mode-32bit:
  patch 32bit glibc
EOS
exit 1
}

function error {
  echo "\e[31m[Err]\e[m $1" >&2
  exit 1
}

function info {
  echo -e "\e[34m[i]\e[m $1"
}

function patch {
  info "64bit glibc patch"
  sudo docker pull ubuntu:$ARG1
  sudo docker run --name tmp$ARG1 -i -t ubuntu:$ARG1 bash -c "apt update && apt install libc6-dbg"
  sudo docker cp tmp$ARG1:/lib/x86_64-linux-gnu/ld-$ARG2.so .
  sudo docker cp tmp$ARG1:/lib/x86_64-linux-gnu/libc-$ARG2.so "libc.so.6"
  mkdir -p ".debug"
  sudo docker cp tmp$ARG1:/usr/lib/debug/lib/x86_64-linux-gnu/libc-$ARG2.so ".debug/libc.so.6"
  mkdir -p .debug/lib/x86_64-linux-gnu/
  sudo docker cp tmp$ARG1:/usr/lib/debug/lib/x86_64-linux-gnu/ld-$ARG2.so ".debug/ld-$ARG2.so"
  sudo docker rm tmp$ARG1
  patchelf --set-interpreter `pwd`/ld-$ARG2.so $ARG3
  patchelf --replace-needed  libc.so.6 "`pwd`/libc.so.6" $ARG3
  patchelf  --set-rpath `pwd` $ARG3
}

function patch_32 {
  info "32bit glibc patch"
  sudo docker pull ubuntu:$ARG1
  sudo docker run --name tmp$ARG1 -i -t ubuntu:$ARG1 bash -c "apt update && apt -y install libc6-i386 libc6-dbg-i386-cross"
  sudo docker cp tmp$ARG1:/lib32/ld-$ARG2.so .
  sudo docker cp tmp$ARG1:/lib32/libc-$ARG2.so "libc.so.6"
  mkdir -p ".debug"
  sudo docker cp tmp$ARG1:/usr/i686-linux-gnu/lib/debug/lib/i386-linux-gnu/libc-$ARG2.so ".debug/libc.so.6"
  mkdir -p .debug/lib/i386-linux-gnu
  sudo docker cp tmp$ARG1:/usr/i686-linux-gnu/lib/debug/lib/i386-linux-gnu/ld-$ARG2.so ".debug/ld-$ARG2.so"
  sudo docker rm tmp$ARG1
  patchelf --set-interpreter `pwd`/ld-$ARG2.so $ARG3
  patchelf --replace-needed  libc.so.6 "`pwd`/libc.so.6" $ARG3
  patchelf  --set-rpath `pwd` $ARG3
}


#### init ####
# args
## ubuntu version
ARG1=
## glibc version
ARG2=
## path of binary
ARG3=
## 32bit mode
m32=
# array of args
args=()
while [ "$#" != 0 ]; do
  case $1 in
    -h | --help      ) usage;;
    -m32 | --mode-32bit       ) m32=1;;
    -* | --*         ) error "$1 : invalid option" ;;
    *                ) args+=("$1");; # add args to array
  esac
  shift
done
# error handling
## shortage of args
[ "${#args[@]}" != 3 ] && usage

ARG1="${args[0]}"
ARG2="${args[1]}"
ARG3="${args[2]}"

### main part ###
if [ $m32 -eq 1 ]; then
  # patch 32bit glibc
  patch_32
else
  # normal patch(64bit)
  patch
fi

